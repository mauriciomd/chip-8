package emu

import (
	"bytes"
	"io"
)

const MEMORY_SIZE = 4096

type Memory [MEMORY_SIZE]byte

type Stack struct {
	Data []uint16
}

func (s *Stack) Push(v uint16) {
	s.Data = append(s.Data, v)
}

func (s *Stack) Pop() uint16 {
	l := len(s.Data)
	if l == 0 {
		return 0
	}

	v := s.Data[l-1]
	s.Data = s.Data[:l]
	return v
}

func NewMemory() (*Memory, *Stack) {
	memory := Memory{}
	stack := Stack{
		Data: make([]uint16, 8),
	}

	memory.loadFont()
	return &memory, &stack
}

func (m *Memory) LoadRom(r io.Reader) {
	m.load(r, 0x200)
}

func (m *Memory) loadFont() {
	font := []byte{
		0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
		0x20, 0x60, 0x20, 0x20, 0x70, // 1
		0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
		0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
		0x90, 0x90, 0xF0, 0x10, 0x10, // 4
		0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
		0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
		0xF0, 0x10, 0x20, 0x40, 0x40, // 7
		0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
		0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
		0xF0, 0x90, 0xF0, 0x90, 0x90, // A
		0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
		0xF0, 0x80, 0x80, 0x80, 0xF0, // C
		0xE0, 0x90, 0x90, 0x90, 0xE0, // D
		0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
		0xF0, 0x80, 0xF0, 0x80, 0x80, // F
	}

	m.load(bytes.NewReader(font), 0x50)
}

func (m *Memory) load(r io.Reader, baseAddr int) {
	data, _ := io.ReadAll(r)

	for i := 0; i < len(data); i++ {
		m[i+baseAddr] = data[i]
	}
}
